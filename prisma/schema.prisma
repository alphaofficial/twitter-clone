// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  email       String?   @unique
  password    String
  username    String    @unique
  phonenumber String?   @unique
  firstname   String?
  lastname    String?
  bio         String?
  dob         String?
  avatar      String?
  Tweet       Tweet[]
  Reply       Reply[]
  Like        Like[]
  Retweet     Retweet[]
  followers   Follows[] @relation("follower")
  following   Follows[] @relation("following")
}

model Tweet {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String
  imageSrc  String[]
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int
  likes     Like[]
  retweets  Retweet[]
  replies   Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int
  Tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   Int?
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int
  Tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   Int?
}

model Retweet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int
  Tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   Int?
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}
