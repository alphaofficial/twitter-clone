// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  email       String?    @unique
  password    String
  username    String     @unique
  phonenumber String?    @unique
  firstname   String?
  lastname    String?
  bio         String?
  dob         String?
  avatar      String?
  followedBy  User[]     @relation("UserToUser")
  User        User?      @relation("UserToUser", fields: [userId], references: [id])
  userId      Int?
  Following   Following? @relation(fields: [followingId], references: [id])
  followingId Int?
  Likes       Likes?     @relation(fields: [likesId], references: [id])
  likesId     Int?
  Retweets    Retweets?  @relation(fields: [retweetsId], references: [id])
  retweetsId  Int?
  Tweet       Tweet[]
  Replies     Replies[]
}

model Following {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  users     User[]
}

model Tweet {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  content   String
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  Retweets  Retweets[]
  Likes     []
  Replies   Replies[]
}

model Replies {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  tweetId   Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
}

model Likes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweetId   Int
  users     User[]
  Tweet     Tweet    @relation(fields: [tweetId], references: [id])
}

model Retweets {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweetId   Int
  users     User[]
  Tweet     Tweet    @relation(fields: [tweetId], references: [id])
}
